@startuml
actor User
participant TokenEndpoint
participant AuthorizationServerEndpointsConfigurer
participant "tokenGranter:TokenGranter" as TokenGranter
participant CompositeTokenGranter
participant AbstractTokenGranter
participant AuthorizationServerTokenServices
participant TokenStore

'/oauth/token,post
User-> TokenEndpoint: postAccessToken()
activate TokenEndpoint

'TokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient)
'OAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest)
TokenEndpoint->TokenGranter: getTokenGranter().grant(grantType,tokenRequest)
activate TokenGranter

TokenGranter-> TokenGranter:grant(grantType, TokenRequest)
'AuthorizationServerEndpointsConfigurer：
'@Override
'				public OAuth2AccessToken grant(String grantType, TokenRequest tokenRequest) {
'					if (delegate == null) {
'						delegate = new CompositeTokenGranter(getDefaultTokenGranters());
'					}
'					return delegate.grant(grantType, tokenRequest);
'				}

'grant(grantType, TokenRequest)
TokenGranter-> AuthorizationServerEndpointsConfigurer:getDefaultTokenGranters
activate AuthorizationServerEndpointsConfigurer

TokenGranter<--AuthorizationServerEndpointsConfigurer:List<TokenGranter>

TokenGranter-> CompositeTokenGranter: <<create>> (List<TokenGranter>)
activate CompositeTokenGranter

TokenGranter<-- CompositeTokenGranter:CompositeTokenGranter
deactivate CompositeTokenGranter

TokenGranter->CompositeTokenGranter:grant(grantType,TokenRequest)
activate CompositeTokenGranter

'CompositeTokenGranter: 迭代 TokenGranters 集合调用 grant(grantType,TokenRequest)
loop TokenGranter granter : tokenGranters
CompositeTokenGranter->AbstractTokenGranter: 迭代TokenGranters集合调用 grant(grantType,TokenRequest)
end

AbstractTokenGranter->AbstractTokenGranter:grant(grantType,TokenRequest)
activate AbstractTokenGranter

AbstractTokenGranter->AbstractTokenGranter:getAccessToken(ClientDetails,TokenRequest)
activate AbstractTokenGranter

AbstractTokenGranter->AuthorizationServerTokenServices:createAccessToken(OAuth2Authentication)
activate AuthorizationServerTokenServices

AuthorizationServerTokenServices->TokenStore:getAccessToken(OAuth2Authentication)
activate TokenStore

AuthorizationServerTokenServices<--TokenStore:OAuth2AccessToken existingAccessToken
deactivate TokenStore

AuthorizationServerTokenServices->AuthorizationServerTokenServices:createAccessToken(OAuth2Authentication)
activate AuthorizationServerTokenServices

AuthorizationServerTokenServices->AuthorizationServerTokenServices:createAccessToken(OAuth2Authentication,OAuth2RefreshToken)
activate AuthorizationServerTokenServices

AuthorizationServerTokenServices<--AuthorizationServerTokenServices:OAuth2AccessToken accessToken
deactivate AuthorizationServerTokenServices
deactivate AuthorizationServerTokenServices



'tokenStore.storeAccessToken(accessToken, authentication);
AuthorizationServerTokenServices->TokenStore:storeAccessToken(OAuth2AccessToken,OAuth2Authentication)
deactivate AuthorizationServerTokenServices

'AbstractTokenGranter：tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));
AbstractTokenGranter<--AuthorizationServerTokenServices:OAuth2AccessToken accessToken
deactivate AbstractTokenGranter

CompositeTokenGranter<--AbstractTokenGranter:getAccessToken(client, tokenRequest):OAuth2AccessToken
deactivate AbstractTokenGranter

TokenGranter<--CompositeTokenGranter: granter.grant(grantType, tokenRequest):OAuth2AccessToken
deactivate CompositeTokenGranter

TokenEndpoint<--TokenGranter:OAuth2AccessToken
deactivate TokenGranter

User<--TokenEndpoint:OAuth2AccessToken
deactivate TokenEndpoint

@enduml