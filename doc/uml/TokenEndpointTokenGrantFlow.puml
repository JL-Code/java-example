@startuml
actor User
entity TokenEndpoint
'entity AbstractEndpoint
entity TokenGranter
entity AuthorizationServerEndpointsConfigurer
entity CompositeTokenGranter
entity AbstractTokenGranter
entity AuthorizationServerTokenServices
entity TokenStore

'/oauth/token,post
User-> TokenEndpoint: postAccessToken()
activate TokenEndpoint

'TokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient)
'OAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest)
TokenEndpoint->TokenGranter: getTokenGranter().grant(grantType,tokenRequest)
activate TokenGranter

TokenGranter-> TokenGranter:grant(grantType, TokenRequest)
TokenGranter-> CompositeTokenGranter:grant(grantType, TokenRequest)

'迭代 TokenGranters 集合调用 grant(grantType,TokenRequest)
loop TokenGranter granter : tokenGranters
CompositeTokenGranter->AbstractTokenGranter: 迭代TokenGranters集合调用 grant(grantType,TokenRequest)
end

AbstractTokenGranter->AbstractTokenGranter:grant(grantType,TokenRequest)

AbstractTokenGranter->AbstractTokenGranter:getAccessToken(ClientDetails,TokenRequest)

AbstractTokenGranter->AuthorizationServerTokenServices:createAccessToken(OAuth2Authentication)

AuthorizationServerTokenServices->TokenStore:getAccessToken(OAuth2Authentication)
AuthorizationServerTokenServices<--TokenStore:OAuth2AccessToken

AuthorizationServerTokenServices->AuthorizationServerTokenServices:createAccessToken(OAuth2Authentication,OAuth2RefreshToken)

'tokenStore.storeAccessToken(accessToken, authentication);
AuthorizationServerTokenServices->TokenStore:storeAccessToken(OAuth2AccessToken,OAuth2Authentication)

'AbstractTokenGranter：tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));
AbstractTokenGranter<--AuthorizationServerTokenServices:OAuth2AccessToken

@enduml